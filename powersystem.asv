classdef powersystem
    %SYSTEM Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        systembusses = powerbus.empty;
        Ybus;
        runnum;
        systemTLs = powerTL.empty;
    end
    
    methods
        function obj = powersystem(Busses,TLs)
            obj.systembusses = Busses;
            obj.systemTLs = TLs;
            obj = obj.generateYbus;
            obj.runnum = 0;
        end
        function obj = generateYbus(obj)
            obj.Ybus = zeros(length(obj.systembusses),length(obj.systembusses));
            for i = 1:length(obj.systemTLs)
                obj.Ybus(obj.systemTLs(i).FromBus,obj.systemTLs(i).ToBus) = obj.Ybus(obj.systemTLs(i).FromBus,obj.systemTLs(i).ToBus) - (obj.systemTLs(i).Y);
                obj.Ybus(obj.systemTLs(i).ToBus,obj.systemTLs(i).FromBus) = obj.Ybus(obj.systemTLs(i).ToBus,obj.systemTLs(i).FromBus) - (obj.systemTLs(i).Y);
                obj.Ybus(obj.systemTLs(i).ToBus,obj.systemTLs(i).ToBus) = obj.Ybus(obj.systemTLs(i).ToBus,obj.systemTLs(i).ToBus) + (obj.systemTLs(i).Y) + obj.systemTLs(i).Yend;
                obj.Ybus(obj.systemTLs(i).FromBus,obj.systemTLs(i).FromBus) = obj.Ybus(obj.systemTLs(i).FromBus,obj.systemTLs(i).FromBus) + (obj.systemTLs(i).Y) + obj.systemTLs(i).Yend;
            end
        end
        function obj = calculateloadflow(obj,varcompon)
            obj.runnum = obj.runnum + 1;
            for b = 1:length(obj.systembusses)
                switch obj.systembusses(b).type
                    case 'PV'
                        I = Iarray(obj,0);
                        obj.systembusses(b).Q = -imag(conj(obj.systembusses(b).V)*I(b,1));
                        I = Iarray(obj,b);
                        obj.systembusses(b).V = abs(obj.systembusses(b).V)*exp(1i*angle(1/obj.Ybus(b,b)*((obj.systembusses(b).P-1i*obj.systembusses(b).Q)/conj(obj.systembusses(b).V)-I(b,1))));
                        obj.systembusses(b).Q = obj.systembusses(b).Q - obj.systembusses(b).Qorig;
                    case 'PQ'
                        switch (varcompon>0&&obj.systembusses(b).VARCompensated>0)
                            case 0
                                I = Iarray(obj,b);
                                obj.systembusses(b).V = (1/obj.Ybus(b,b)*((obj.systembusses(b).P-1i*obj.systembusses(b).Q)/conj(obj.systembusses(b).V)-I(b,1)));
                            case 1
                                I = Iarray(obj,0);
                                obj.systembusses(b).Q = -imag(conj(obj.systembusses(b).V)*I(b,1));
                                obj.systembusses(b).VARComp = obj.systembusses(b).Q - obj.systembusses(b).Qorig;
                                I = Iarray(obj,b);
                                obj.systembusses(b).V = varcompon*exp(1i*angle(1/obj.Ybus(b,b)*((obj.systembusses(b).P-1i*obj.systembusses(b).Q)/conj(obj.systembusses(b).V)-I(b,1))));
                        end
                    case 'Ref'
                        I = Iarray(obj,0);
                        S = conj(conj(obj.systembusses(b).V)*I(b,1));
                        obj.systembusses(b).P = real(S)+obj.systembusses(b).P;
                        obj.systembusses(b).Q = imag(S)+obj.systembusses(b).Qorig;
                end
            end
        end
        function I = Iarray(obj,except)
            I = zeros(length(obj.systembusses),1);
            for k = 1:length(obj.systembusses)
                for n = 1:length(obj.systembusses)
                    switch (except&&k==n)
                        case 0
                            I(k,1) = I(k,1) + obj.Ybus(k,n)*obj.systembusses(n).V;
                        otherwise
                            I(k,1) = I(k,1) + 0;
                    end
                end
            end
        end
        function I = Iarraypick(obj,except,selectedvoltage)
            I = zeros(length(obj.systembusses),1);
            for k = 1:length(obj.systembusses)
                for n = 1:length(obj.systembusses)
                    switch except==n
                        case 1
                            I(k,1) = I(k,1) + 0;
                        otherwise
                            I(k,1) = I(k,1) + obj.Ybus(k,n)*selectedvoltage;
                    end
                end
            end
        end
        function maxerror = error(obj,prev)
            error = zeros(2*length(obj.systembusses),1);
            for b = 1:length(obj.systembusses)
                error(b) = (abs(obj.systembusses(b).V) - abs(prev.systembusses(b).V))/abs(prev.systembusses(b).V);
                error(b+1) = (angle(obj.systembusses(b).V) - angle(prev.systembusses(b).V))/angle(prev.systembusses(b).V);
            end
            maxerror = max(error);
        end
        function minvoltage = minvoltage(obj)
            voltage = zeros(length(obj.systembusses),1);
            for b = 1:length(obj.systembusses)
                voltage(b) = abs(obj.systembusses(b).V);
            end
            minvoltage = min(voltage);
        end 
        function obj = solveloadflowworker(obj,desirederror,varcompon)
            prev = obj;
            obj = obj.calculateloadflow(varcompon);
            prev = obj;
            obj = obj.calculateloadflow(varcompon);
            while obj.error(prev)>(100.-abs(desirederror)) && isfinite(obj.error(prev)) && obj.error(prev)>0
                prev = obj;
                obj = obj.calculateloadflow(varcompon);
                prev = obj;
                obj = obj.calculateloadflow(varcompon);
            end
        end
        function obj = solveloadflow(obj,desirederror,varcompon)
            runs = 1;
            prev = obj;
            obj = solveloadflowworker(obj,desirederror,varcompon);
            while obj.error(prev)>(100-desirederror)/100  || ~isfinite(obj.error(prev)) || obj.error(prev)==0
               runs = runs + 1;
               prev = obj;
               obj = solveloadflowworker(obj,desirederror,varcompon);
               prev = obj;
               obj = solveloadflowworker(obj,desirederror,varcompon);
               prev = obj;
               obj = solveloadflowworker(obj,desirederror,varcompon);
               if runs>=500
                   global erroredsystem;
                   erroredsystem = obj;
                   error('System is not stable! After Runs: %d', obj.runnum);
               end
            end
        end  
        function displaysystembusses(obj,runs)
            s = sprintf('After %d Runs:',obj.runnum);
            if runs==1
                disp(s);
            end
            for b = 1:length(obj.systembusses)
                s = sprintf('Bus %d (%s Bus): V=%0.6f@%0.6f%c Vpu, P=%0.6f Wpu, Q= %0.6f VARpu',b,obj.systembusses(b).type,abs(obj.systembusses(b).V),angle(obj.systembusses(b).V)/(2*pi)*360,char(176),obj.systembusses(b).P,obj.systembusses(b).Q);
                if obj.systembusses(b).VARCompensated
                    s = strcat(s,sprintf(', Static VAR Compensated: X=%0.6f Ohms(pu), Qload= %0.6f VARpu',(abs(obj.systembusses(b).V)^2/-obj.systembusses(b).VARComp),-obj.systembusses(b).VARComp));
                end
                disp(s);
            end
        end
        function obj = solveloadflowcompensated(obj,desirederror)
            original = obj;
            solvedoriginal = obj.solveloadflow(desirederror,0);
            compensatedsystem = original;
            for b = 1:length(solvedoriginal.systembusses)
                if abs(solvedoriginal.systembusses(b).V)<.96
                    compensatedsystem.systembusses(b).VARCompensated = 1;
                end
            end
            compensatedsystem = compensatedsystem.solveloadflow(desirederror,1);
            newsystem = original.copyVARCompensators(compensatedsystem);
            newsystem = newsystem.solveloadflow(desirederror,0);
            obj = newsystem;
                
        end
        function obj = copyVARCompensators(obj,compd)
            for i=1:length(obj.systembusses)
                obj.systembusses(i).VARComp = compd.systembusses(i).VARComp;
                obj.systembusses(i).VARCompensated = compd.systembusses(i).VARCompensated;
                obj.systembusses(i).Q = compd.systembusses(i).Q;
            end
        end
        function obj = displayflows(obj)
            for tl = 1:length(obj.systemTLs)
                Vs = obj.systembusses(obj.systemTLs(tl).FromBus).V;
                Vr = obj.systembusses(obj.systemTLs(tl).ToBus).V;
                Iline = (Vs-Vr)*obj.systemTLs(tl).Y;
                IsShunt = Vs*obj.systemTLs(tl).Yend;
                IrShunt = Vr*obj.systemTLs(tl).Yend;
                Is = (IsShunt + Iline);
                Ir = -(Iline-IrShunt);
                Ss = Vs*conj(Is);
                Sr = Vr*conj(Ir);
                Sl = Ss+Sr;
                info = sprintf('Line #%d (From %d to %d): P@%d= %0.6f Wpu, Q@%d= %0.6f VARPu, P@%d= %0.6f Wpu, Q@%d= %0.6f VARpu, Ploss= %0.6f Wpu, Qconsumed= %0.6f VARpu',tl,obj.systemTLs(tl).FromBus,obj.systemTLs(tl).ToBus,obj.systemTLs(tl).FromBus,real(Ss),obj.systemTLs(tl).FromBus,imag(Ss),obj.systemTLs(tl).ToBus,real(Sr),obj.systemTLs(tl).ToBus,imag(Sr),real(Sl),abs(imag(Sl)));
                disp(info);
                obj.systemTLs(tl).Ss = Ss;
                obj.systemTLs(tl).Sl = Sl;
                obj.systemTLs(tl).Sr = Sr;
                
            end
        end
        function obj = displaysystemflows(obj)
            BusPowerIn = 0;
            BusPowerOut = 0;
            BusVARIn= 0;
            BusVAROut = 0;
            TLPower = 0;
            TLVAR = 0;
            for b=1:length(obj.systembusses)
                switch obj.systembusses(b).P>=0
                    case 1
                        BusPowerIn = BusPowerIn + obj.systembusses(b).P;
                    case 0
                        BusPowerOut = BusPowerOut + obj.systembusses(b).P;
                end
                switch obj.systembusses(b).Q>=0
                    case 1
                        BusVARIn = BusVARIn + obj.systembusses(b).Q + strcmp(obj.systembusses(b).type,'PV')*obj.systembusses(b).Qorig;
                    case 0
                        BusVAROut = BusVAROut + obj.systembusses(b).Q + strcmp(obj.systembusses(b).type,'PV')*obj.systembusses(b).Qorig;
                end
            end
            for tl=1:length(obj.systemTLs)
                TLPower = TLPower - real(obj.systemTLs(tl).Sl);
                TLVAR = TLVAR - imag(obj.systemTLs(tl).Sl);
            end
            info = sprintf('Total Bus Power In= %0.6f Wpu, Total Bus VAR In= %0.6f VARpu, Total Bus Power Out= %0.6f Wpu, Total Bus VAR Out= %0.6f VARpu \nTotalTL Power= %0.6f Wpu, TotalTL VAR= %0.6f VARpu',BusPowerIn,BusVARIn,BusPowerOut,BusVAROut,TLPower,TLVAR);
            disp(info);
            info = sprintf('Net Power= %f Wpu, Net VAR= %f VARpu  (Both should ALWAYS be zero)',(BusPowerIn+BusPowerOut)+TLPower,BusVARIn+BusVAROut+TLVAR);
            disp(info);
            info = sprintf('Transmission Efficency (Real Power)= %0.6f%%',100-100*(BusPowerIn+BusPowerOut)/BusPowerIn);
            disp(info);
        end
    end
    
end

